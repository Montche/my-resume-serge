name: Build, Push, and Deploy Image

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  id-token: write 
  contents: read 

env:
  AWS_REGION: us-east-1
  AWS_ROLE: ${{ secrets.AWS_ACTION_ROLE }}
  ECR_REPO_NAME: dev
  IMAGE_TAG: ${{ github.run_number }}
  TASK_DEFINITION: nginx-task
  ECS_CLUSTER: nginx-cluster
  ECS_SERVICE: nginx-service
  CONTAINER_NAME: nginx

jobs:
  Build:
    runs-on: ubuntu-latest
    outputs:  # Define outputs for the Deploy job
      image-uri: ${{ steps.set-image.outputs.image-uri }}
    steps:
      - name: Clone repo
        uses: actions/checkout@v3
      
      - name: AWS Creds Config 
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to ECR 
        uses: aws-actions/amazon-ecr-login@v1
        id: ecr-login
      
      - name: Build and tag image 
        run: |
          docker build -t ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME}}:${{ env.IMAGE_TAG }} .
      
      - name: Scan Docker Image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME}}:${{ env.IMAGE_TAG }}"
          format: "table"
          exit-code: "0"
          severity: "CRITICAL,HIGH"
      
      - name: Push image to ECR
        run: |
          docker push ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME}}:${{ env.IMAGE_TAG }}
      
      - name: Store image URI for Deploy job
        id: set-image
        run: |
          IMAGE_URI="${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME}}:${{ env.IMAGE_TAG }}"
          echo "image-uri=$IMAGE_URI" >> $GITHUB_OUTPUT

  Deploy:
    runs-on: ubuntu-latest
    needs: Build  # Depends on Build job
    steps:
      - name: AWS Creds Config 
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Download current task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.TASK_DEFINITION }} --query taskDefinition > task-definition.json
      
      - name: Update task definition with new ECR image
        run: |
          jq --arg IMAGE_URI "${{ needs.Build.outputs.image-uri }}" '.containerDefinitions[0].image = $IMAGE_URI | 
          del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy, .deregisteredAt)' task-definition.json > register-task-definition.json
      
      - name: Register new task definition
        run: |
          aws ecs register-task-definition --cli-input-json file://register-task-definition.json
          echo "NEW_TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition ${{ env.TASK_DEFINITION }} --query 'taskDefinition.taskDefinitionArn' --output text)" >> $GITHUB_ENV
      
      - name: Update ECS service
        run: |
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --task-definition ${{ env.NEW_TASK_DEFINITION }} --force-new-deployment