name: build push and deploy image

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  id-token: write 
  contents: read 

env:
  AWS_REGION: us-east-1
  AWS_ROLE: ${{ secrets.AWS_ACTION_ROLE }}
  ECR_REPO_NAME: dev
  IMAGE_TAG: ${{ github.run_number}}


jobs:
  Build:
    runs-on: ubuntu-latest  # guthub runner
    steps:
      - name: clone repo
        uses: actions/checkout@v3
      - name: Aws creds config 
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE }}     # OIDC
          aws-region: ${{ env.AWS_REGION}}
      - name: Loging to ecr 
        uses: aws-actions/amazon-ecr-login@v1
        id: ecr-login
      - name: Build and tag  image 
        id: build-and-push
        run: |
            docker build -t ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME}}:${{env.IMAGE_TAG}} .
            
      - name: Scan docker Image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME}}:${{env.IMAGE_TAG}}"  # Scans the built image
          format: "table"
          exit-code: "0"
          severity: "CRITICAL,HIGH"
      - name: Push image to ecr
        run: |
          docker push ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME}}:${{env.IMAGE_TAG}}

      - name: Store image in github env 
        run: echo "Image=${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME}}:${{env.IMAGE_TAG}}" >> $GITHUB_ENV

  Deploy: 
    runs-on: ubuntu-latest
    needs: Build 
    steps:
      - name: Download current task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.TASK_DEFINITION }} \
          --query taskDefinition > task-definition.json

      - name: Update task definition with new ECR image
        run: |
          # Install jq if not already available
          sudo apt-get install -y jq
        
           # Update the image in the task definition
          jq --arg IMAGE_URI "${{ steps.build-and-push.outputs.image}}" \
          '.containerDefinitions[0].image = $IMAGE_URI | 
           del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy, .deregisteredAt)' \
          task-definition.json > register-task-definition.json

      - name: Register new task definition
        run: |
          aws ecs register-task-definition --cli-input-json file://register-task-definition.json
        
          # Get the new revision number
          echo "NEW_TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition ${{ env.TASK_DEFINITION }} --query 'taskDefinition.taskDefinitionArn' --output text)" >> $GITHUB_ENV

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ env.NEW_TASK_DEFINITION }} \
            --force-new-deployment